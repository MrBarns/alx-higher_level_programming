============================
How to Use 0-add_integer.py
============================

This module only contains the function ''add_integer()''

Numbers
========

"add_integer()" when given one int argument (a) returns a value equivalent to
a + 98

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2)
	100

	>>> add_integer(-2)
	96

With two int arguments (a, b) it returns a value equivalent to a + b

::

	>>> add_integer(8, 4)
	12

	>>> add_integer(8, -4)
	4

With one or more float arguments, the decimals are truncated and then added

::

	>>> add_integer(5.5, 10)
	15
	>>> add_integer(4.5, 6.5)
	10
	>>> add_integer(-4.5, 6.5)
	2
	>>> add_integer(-4.5, -6.7)
	-10

Edge case float arguments will raise an error

::

	Infinity
	========
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('-inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

	Nan
	===
	>>> add_integer(float('Nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Non-numbers
===========

If one or more arguments is not an int or float value, a TypeError is raised

::

	>>> add_integer([5], 10)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(6, "10")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	>>> add_integer({'a': 89}, "Hello")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
